import React, { useEffect, useState } from "react";
import Counter from "./countDown";
import LogoImg from "../assets/image/logo.png";
import * as Web3Utils from 'web3-utils';
import Web3Modal from "web3modal";
import Web3 from "web3";
import WalletConnect from "@walletconnect/web3-provider";
import { getContractInstance } from '../contracts/lotteryInstance';
import abi from '../contracts/abi'
import RNG_abi from '../contracts/RNG_abi'
import Stack from "@mui/material/Stack";
import Paper from "@mui/material/Paper";
import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Modal from "@mui/material/Modal";
import {
  getChildLists,
  addNewChild,
  removeChild,
} from "./utils";

export default function Ticket() {
  const [lotteryIdForClose, setLotteryIdForClose] = useState(1);
  const [lotteryIdForView, setLotteryIdForView] = useState(1);
  const [lotteryIdForClaim, setLotteryIdForClaim] = useState(1);
  const [totalRound, setTotalRound] = useState(1);
  const [winningNumber, setWinningNumber] = useState("");
  const [privKey, setPrivKey] = useState("");
  const [autoInterval, setAutoInterval] = useState(480);
  const [interval, setInterval] = useState(480);
  const [deployedAddress, setDeployedAddress] = useState("");
  const [lotteryInfo, setLotteryInfo] = useState([]);
  const [childLists, setChildLists] = useState([]);
  const [modalOpen, setModalOpen] = useState(false);
  const [settingModalOpen, setSettingModalOpen] = useState(false);
  const [childName, setChildName] = useState("");
  const [buttonIndex, setButtonIndex] = useState(0);
  const [currentContractAddress, setCurrentContractAddress] = useState("");
  const [RNGInstance, setRNGInstance] = useState("");
  const [LotteryInstance, setLotteryInstance] = useState("");
  const [walletArray, setWalletArray] = useState("");
  const [web3Data, setWeb3Data] = useState({
    fetching: false,
    address: "",
    web3: null,
    provider: null,
    connected: false,
    chainId: 1,
    networkId: 1,
    contract: null,
    lotteryInfo: []
  });
  const INITIAL_STATE = {
    fetching: false,
    address: "",
    web3: null,
    provider: null,
    connected: false,
    chainId: 1,
    networkId: 1,
    contract: null,
    lotteryInfo: []
  };

  const modalStyle = {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: 400,
    bgcolor: "background.paper",
    border: "2px solid #000",
    boxShadow: 24,
    p: 4,
  };

  const modalStyle1 = {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: 1200,
    bgcolor: "background.paper",
    border: "2px solid #000",
    boxShadow: 24,
    p: 4,
  };


  // const getNetwork = () => getChainData(this.state.chainId).network;
  const getProviderOptions = () => {
    const infuraId = "00ca1859789d4b40bce01f4104844224";
    const providerOptions = {
      walletconnect: {
        package: WalletConnect,
        options: {
          network: "binance",
          rpc: {
            56: "https://bsc-dataseed1.binance.org"
          }
        }
      }
    };
    return providerOptions;
  };

  const web3Modal = new Web3Modal({
    network: "Binance",
    cacheProvider: true,
    providerOptions: getProviderOptions(),
  });

  useEffect(() => {
    if (web3Modal.cachedProvider) {
      onConnect();
      updateChildren();
    }
  }, []);

  function ellipseAddress(
    address = "",
    width = 10
  ) {
    return `${address.slice(0, width)}...${address.slice(-width)}`;
  }
  const resetApp = async () => {
    const { web3 } = web3Data;
    if (web3 && web3.currentProvider && web3.currentProvider.close) {
      await web3.currentProvider.close();
    }
    await web3Modal.clearCachedProvider();
    setWeb3Data({ ...INITIAL_STATE });
  };

  const subscribeProvider = async (provider) => {
    if (!provider.on) {
      return;
    }
    provider.on("close", () => resetApp());
    provider.on("accountsChanged", async (accounts) => {
      console.log(accounts[0])
      setWeb3Data({ ...web3Data, address: accounts[0] });
      // await this.getAccountAssets();
    });
    provider.on("chainChanged", async (chainId) => {
      const { web3 } = web3Data;
      const networkId = await web3.eth.net.getId();
      setWeb3Data({ ...web3Data, chainId: chainId, networkId: networkId });
      // await this.getAccountAssets();
    });

    provider.on("networkChanged", async (networkId) => {
      const { web3 } = web3Data;
      const chainId = await web3.eth.chainId();
      setWeb3Data({ ...web3Data, chainId: chainId, networkId: networkId });
      // await this.getAccountAssets();
    });
  };
  function initWeb3(provider) {
    const web3 = new Web3(provider);

    web3.eth.extend({
      methods: [
        {
          name: "chainId",
          call: "eth_chainId",
          outputFormatter: web3.utils.hexToNumber
        }
      ]
    });

    return web3;
  }


  const onConnect = async () => {
    try {
      const provider = await web3Modal.connect();
      await subscribeProvider(provider);

      await provider.enable();
      const web3 = initWeb3(provider);

      const curChainId = await provider.request({ method: 'eth_chainId' });
      const binanceTestChainId = '0x61'
      if (curChainId === binanceTestChainId) {
        console.log("Bravo!, you are on the correct network");
      } else {
        try {
          await provider.request({
            method: 'wallet_switchEthereumChain',
            params: [{ chainId: '0x61' }],
          });
          console.log("You have succefully switched to Binance Test network")
        } catch (switchError) {
          // This error code indicates that the chain has not been added to MetaMask.
          if (switchError.code === 4902) {
            try {
              await provider.request({
                method: 'wallet_addEthereumChain',
                params: [
                  {
                    chainId: '0x61',
                    chainName: 'Binance Smart Chain Testnet',
                    rpcUrls: ['https://data-seed-prebsc-1-s1.binance.org:8545/'],
                    blockExplorerUrls: ['https://testnet.bscscan.com/'],
                    nativeCurrency: {
                      symbol: 'BNB',
                      decimals: 18,
                    }
                  }
                ]
              });
            } catch (addError) {
              console.log(addError);
              // alert(addError);
            }
          }
          // alert("Failed to switch to the network")
          return;
        }
      }

      const accounts = await web3.eth.getAccounts();
      const address = accounts[0];

      const networkId = await web3.eth.net.getId();

      const chainId = await web3.eth.chainId();
      const contract = await getContractInstance("0xF0a65A27688E65406E3fF9a44516c985E909F06d");

      const curLotteryId = await contract.getCurrentLotteryId();
      const lotteryInfo = await contract.getLotteryInfo(curLotteryId);
      setWeb3Data({
        web3,
        provider,
        connected: true,
        address,
        chainId,
        networkId,
        contract,
        lotteryInfo
      });
      setTotalRound(curLotteryId);
      setLotteryIdForClose(curLotteryId);
      setLotteryIdForClaim(curLotteryId);
      // await this.getAccountAssets();
    } catch (e) {
      console.log(e);
    }
  };

  const closeLottery = async () => {
    await web3Data.contract.closeLottery(web3Data.address, lotteryIdForClose);
  }

  const startLottery = async () => {
    const curTime = new Date().getTime();
    const endTime = parseInt(curTime / 1000);
    await web3Data.contract.startLottery(web3Data.address, endTime + interval * 60);
  }

  const finalizeLottery = async () => {
    const isManual = winningNumber.length != 0;
    const numbers = winningNumber.split(" ");
    let winNumber = [];
    if (isManual)
      winNumber.push(numbers);
    else {
      let zeroArray = ["0", "0", "0", "0", "0", "0"];
      winNumber.push(zeroArray);
    }
    console.log(winNumber);
    await web3Data.contract.drawFinalNumberAndMakeLotteryClaimable(web3Data.address, lotteryIdForClaim, isManual, winNumber);
  }

  const confirmAutomation = () => {

  }
  const confirmWallet = async () => {
    const wallets = walletArray.split(",");
    console.log(wallets);
    await web3Data.contract.setOperatorAndTreasuryAndInjectorAddresses(web3Data.address, web3Data.address, wallets);
  }

  const updateChildren = async () => {
    getChildLists().then((myChildList) => {
      console.log(myChildList);
      let newArr = [];
      myChildList.map((row) => {
        console.log(row);
        newArr.push({
          name: row.name,
          address: row.address,
        });
      });
      setChildLists(newArr);
    });
  };

  const handleRemoveChild = async (walletAddress) => {
    if (walletAddress === "0xF0a65A27688E65406E3fF9a44516c985E909F06d") {
      alert("Cannot delete main lottery");
      return;
    }
    removeChild(walletAddress);
    setTimeout(() => {
      updateChildren();
    }, 1000);
  };

  const setLotteryAddress = async () => {
    let account = web3Data.address;
    let parameter = {
      from: account,
      // gas: web3Data.web3.utils.toHex(800000),
      // gasPrice: web3Data.web3.utils.toHex(web3Data.web3.utils.toWei('30', 'gwei'))
    }
    RNGInstance.methods.setLotteryAddress(LotteryInstance.options.address).send(parameter, (err, transactionHash) => {
      console.log('Transaction Hash :', transactionHash);
    }).on('confirmation', () => { }).then((contractInstance) => {
      setButtonIndex(5);
      addNewChild(childName, LotteryInstance.options.address);
      setTimeout(() => {
        updateChildren();
      }, 1000);
      setChildName("");
      setRNGInstance("");
      setLotteryInstance("");
      setButtonIndex(0);
      handleModalClose();
    })
  }
  const deployLottery = async () => {
    let bytecode = '';
    let deploy_contract = new web3Data.web3.eth.Contract(abi);
    let account = web3Data.address;
    let payload = {
      data: bytecode,
      arguments: [
        "0x1753C1a29Ff90ac6C52F46C23C6FDA94d34a70Eb",
        RNGInstance.options.address
      ]
    }
    let parameter = {
      from: account,
      // gas: web3Data.web3.utils.toHex(800000),
      // gasPrice: web3Data.web3.utils.toHex(web3Data.web3.utils.toWei('30', 'gwei'))
    }
    console.log(parameter);
    deploy_contract.deploy(payload).send(parameter, (err, transactionHash) => {
      console.log('Transaction Hash :', transactionHash);
    }).on('confirmation', () => { }).then((newContractInstance) => {
      console.log('Deployed Contract Address : ', newContractInstance.options.address);
      setLotteryInstance(newContractInstance);
      setButtonIndex(4);
    })
  }

  const setFee = async () => {
    let account = web3Data.address;
    let parameter = {
      from: account,
      // gas: web3Data.web3.utils.toHex(800000),
      // gasPrice: web3Data.web3.utils.toHex(web3Data.web3.utils.toWei('30', 'gwei'))
    }
    RNGInstance.methods.setFee("100000000000000000").send(parameter, (err, transactionHash) => {
      console.log('Transaction Hash :', transactionHash);
    }).on('confirmation', () => { }).then((contractInstance) => {
      setButtonIndex(2);
    })
  }

  const setKeyHash = async () => {
    let account = web3Data.address;
    let parameter = {
      from: account,
      // gas: web3Data.web3.utils.toHex(800000),
      // gasPrice: web3Data.web3.utils.toHex(web3Data.web3.utils.toWei('30', 'gwei'))
    }
    RNGInstance.methods.setKeyHash("0xcaf3c3727e033261d383b315559476f48034c13b18f8cafed4d871abe5049186").send(parameter, (err, transactionHash) => {
      console.log('Transaction Hash :', transactionHash);
    }).on('confirmation', () => { }).then((contractInstance) => {
      setButtonIndex(3);
    })
  }

  const deploy = async () => {
    let RNG_bytecode = '60c060405234801561001057600080fd5b50604051610f5e380380610f5e83398101604081905261002f916100c3565b6001600160601b0319606083811b821660a05282901b1660805260006100523390565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35050506100f6565b80516001600160a01b03811681146100be57600080fd5b919050565b600080604083850312156100d657600080fd5b6100df836100a7565b91506100ed602084016100a7565b90509250929050565b60805160601c60a05160601c610e2f61012f6000396000818161039201526108490152600081816104f9015261081a0152610e2f6000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063b37217a411610071578063b37217a41461020d578063ddca3f4314610220578063eed8e1ee14610229578063f2fde38b14610232578063fbe5d9171461024557600080fd5b80638da5cb5b146101c857806394985ddd146101d957806398544710146101ec578063a1c4f55a146101ff57600080fd5b80634bf3057d116100de5780634bf3057d1461017957806361728f39146101a457806369fe0e2d146101ad578063715018a6146101c057600080fd5b806306b091f9146101105780631aa46f59146101255780632a332b2a1461014157806342619f6614610154575b600080fd5b61012361011e366004610c21565b61024d565b005b61012e60045481565b6040519081526020015b60405180910390f35b61012361014f366004610c06565b610298565b6005546101649063ffffffff1681565b60405163ffffffff9091168152602001610138565b60025461018c906001600160a01b031681565b6040516001600160a01b039091168152602001610138565b61012e60035481565b6101236101bb366004610c6d565b6102e4565b610123610313565b6001546001600160a01b031661018c565b6101236101e7366004610c86565b610387565b6101236101fa366004610c6d565b610409565b60055463ffffffff16610164565b61012361021b366004610c6d565b610438565b61012e60065481565b61012e60075481565b610123610240366004610c06565b6105d7565b60075461012e565b6001546001600160a01b031633146102805760405162461bcd60e51b815260040161027790610d4c565b60405180910390fd5b6102946001600160a01b03831633836106c2565b5050565b6001546001600160a01b031633146102c25760405162461bcd60e51b815260040161027790610d4c565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b0316331461030e5760405162461bcd60e51b815260040161027790610d4c565b600655565b6001546001600160a01b0316331461033d5760405162461bcd60e51b815260040161027790610d4c565b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103ff5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c006044820152606401610277565b6102948282610719565b6001546001600160a01b031633146104335760405162461bcd60e51b815260040161027790610d4c565b600355565b6002546001600160a01b031633146104925760405162461bcd60e51b815260206004820152601760248201527f4f6e6c792050616e63616b65537761704c6f74746572790000000000000000006044820152606401610277565b6003546104e15760405162461bcd60e51b815260206004820152601860248201527f4d75737420686176652076616c6964206b6579206861736800000000000000006044820152606401610277565b6006546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561054357600080fd5b505afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190610ca8565b10156105c25760405162461bcd60e51b81526020600482015260166024820152754e6f7420656e6f756768204c494e4b20746f6b656e7360501b6044820152606401610277565b6105d160035460065483610816565b60045550565b6001546001600160a01b031633146106015760405162461bcd60e51b815260040161027790610d4c565b6001600160a01b0381166106665760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610277565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526107149084906109a0565b505050565b816004541461075c5760405162461bcd60e51b815260206004820152600f60248201526e15dc9bdb99c81c995c5d595cdd1259608a1b6044820152606401610277565b610769620f424082610dd7565b61077690620f4240610d81565b6005805463ffffffff191663ffffffff9290921691909117905560025460408051630405030b60e51b815290516001600160a01b03909216916380a06160916004808201926020929091908290030181600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080f9190610ca8565b6007555050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f0000000000000000000000000000000000000000000000000000000000000000858786604051602001610885929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016108b293929190610d09565b602060405180830381600087803b1580156108cc57600080fd5b505af11580156108e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109049190610c4b565b5060008481526020818152604080832054815180840189905280830187905230606082015260808082018390528351808303909101815260a09091019092528151918301919091208784529290915261095e906001610d81565b600086815260208181526040918290209290925580518083018890528082019390935280518084038201815260609093019052815191012090505b9392505050565b60006109f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a729092919063ffffffff16565b8051909150156107145780806020019051810190610a139190610c4b565b6107145760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610277565b6060610a818484600085610a89565b949350505050565b606082471015610aea5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610277565b843b610b385760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610277565b600080866001600160a01b03168587604051610b549190610ced565b60006040518083038185875af1925050503d8060008114610b91576040519150601f19603f3d011682016040523d82523d6000602084013e610b96565b606091505b5091509150610ba6828286610bb1565b979650505050505050565b60608315610bc0575081610999565b825115610bd05782518084602001fd5b8160405162461bcd60e51b81526004016102779190610d39565b80356001600160a01b0381168114610c0157600080fd5b919050565b600060208284031215610c1857600080fd5b61099982610bea565b60008060408385031215610c3457600080fd5b610c3d83610bea565b946020939093013593505050565b600060208284031215610c5d57600080fd5b8151801515811461099957600080fd5b600060208284031215610c7f57600080fd5b5035919050565b60008060408385031215610c9957600080fd5b50508035926020909101359150565b600060208284031215610cba57600080fd5b5051919050565b60008151808452610cd9816020860160208601610da7565b601f01601f19169290920160200192915050565b60008251610cff818460208701610da7565b9190910192915050565b60018060a01b0384168152826020820152606060408201526000610d306060830184610cc1565b95945050505050565b6020815260006109996020830184610cc1565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610da257634e487b7160e01b600052601160045260246000fd5b500190565b60005b83811015610dc2578181015183820152602001610daa565b83811115610dd1576000848401525b50505050565b600082610df457634e487b7160e01b600052601260045260246000fd5b50069056fea26469706673582212200aa3309d5e0e7856ae7106c1bcf9fa9ce786a32f83ac6a3c049a8edf8634cfaf64736f6c634300080700330000000000000000000000006a2aad07396b36fe02a22b33cf443582f682c82f00000000000000000000000084b9b910527ad5c03a9ca831909e21e236ea7b06';
    let deploy_contract = new web3Data.web3.eth.Contract(RNG_abi);
    let account = web3Data.address;
    let payload = {
      data: RNG_bytecode,
      arguments: [
        "0xa555fC018435bef5A13C6c6870a9d4C11DEC329C",
        "0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06"
      ]
    }
    let parameter = {
      from: account,
      // gas: web3Data.web3.utils.toHex(800000),
      // gasPrice: web3Data.web3.utils.toHex(web3Data.web3.utils.toWei('30', 'gwei'))
    }
    console.log(parameter);
    deploy_contract.deploy(payload).send(parameter, (err, transactionHash) => {
      console.log('Transaction Hash :', transactionHash);
    }).on('confirmation', () => { }).then((newContractInstance) => {
      console.log('Deployed Contract Address : ', newContractInstance.options.address);
      setRNGInstance(newContractInstance);
      setButtonIndex(1);
    })
  }

  const handleModalOpen = () => setModalOpen(true);
  const handleModalClose = () => setModalOpen(false);
  const handleSettingModalOpen = async (contractAddress) => {
    const { web3, provider, connected, address, chainId, networkId } = web3Data;
    setCurrentContractAddress(contractAddress);
    const contract = await getContractInstance(contractAddress);

    const curLotteryId = await contract.getCurrentLotteryId();
    const lotteryInfo = await contract.getLotteryInfo(curLotteryId);

    setWeb3Data({
      web3,
      provider,
      connected: true,
      address,
      chainId,
      networkId,
      contract,
      lotteryInfo
    });
    setTotalRound(curLotteryId);
    setLotteryIdForClose(curLotteryId);
    setLotteryIdForClaim(curLotteryId);
    setSettingModalOpen(true)
  };
  const handleSettingModalClose = () => setSettingModalOpen(false);

  const handleLotteryIdChange = (e) => {
    if (e.target.value >= 0) setLotteryIdForClose(e.target.value);
  };

  const handleWalletArray = (e) => {
    setWalletArray(e.target.value);
  }
  const handleChildNameChange = (e) => {
    setChildName(e.target.value);
  };
  const handleClaimableIdChange = (e) => {
    if (e.target.value >= 0) setLotteryIdForClaim(e.target.value);
  };
  const handleViewIdChange = (e) => {
    if (e.target.value >= 0) setLotteryIdForView(e.target.value);
  };
  const handleWinningNumberChange = (e) => {
    setWinningNumber(e.target.value);
  };

  const handlePrivKey = (e) => {
    setPrivKey(e.target.value);
  };
  const handleIntervalChange = (e) => {
    if (e.target.value >= 0)
      setInterval(e.target.value);
  };

  const handleAutoIntervalChange = (e) => {
    if (e.target.value >= 0)
      setAutoInterval(e.target.value);
  };

  const updateLotteryInfo = async () => {
    const lotteryInfo = await web3Data.contract.getLotteryInfo(lotteryIdForView);
    setLotteryInfo(lotteryInfo);
  }

  return (
    <div className="container mx-auto px-40 py-10">
      <div className="flex justify-between py-5">
        <div className="flex items-center">
          <img
            src={LogoImg}
            alt="logo"
            className="w-[40px] h-[40px] float-left"
          />
          <p className="font-bold px-4 text-4xl">Aeterna Lottery Admin Panel</p>
        </div>
        <div
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full w-48 text-center hover:cursor-pointer"
          onClick={web3Data.address === "" ? onConnect : resetApp}
        >
          {web3Data.address === "" ? "Connect Wallet" : ellipseAddress(web3Data.address, 5)}
        </div>
      </div>

      <div>
        {/* <h1 className="text-4xl text-red py-4">Mother-Child Lottery</h1> */}
        <div className="flex justify-between py-2 items-center">
          <Stack justifyContent="center" className="activity-table">
            <div className="activity-header font-bold flex justify-between">
              <span>Manage Lotteries</span>
              <Button
                variant="contained"
                className="text-white"
                style={{ margin: "10px", padding: "0 38px" }}
                onClick={() => handleModalOpen()}
              >
                Add
              </Button>
            </div>
            <TableContainer component={Paper}>
              <Table
                sx={{ minWidth: 650 }}
                aria-label="simple table"
                className="main-theme-color"
              >
                <TableHead>
                  <TableRow>
                    <TableCell className="text-white dashboard-overview-highlight" align="center">
                      Lottery Name
                    </TableCell>
                    <TableCell className="text-white dashboard-overview-highlight" align="center">
                      Contract Address
                    </TableCell>
                    <TableCell align="center" className="text-white dashboard-overview-highlight">
                    </TableCell>
                    <TableCell align="center" className="text-white dashboard-overview-highlight">
                    </TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {web3Data ? (
                    web3Data.address !== "" ? (
                      childLists.length > 0 ? (
                        childLists.map((row, index) => (
                          <TableRow
                            key={index}
                            sx={{
                              "&:last-child td, &:last-child th": { border: 0 },
                            }}
                          >
                            <TableCell
                              align="center"
                              component="th"
                              scope="row"
                              className="text-white dashboard-overview-highlight"
                            >
                              {row.name}
                            </TableCell>
                            <TableCell
                              align="center"
                              component="th"
                              scope="row"
                              className="text-white dashboard-overview-highlight"
                            >
                              {row.address}
                            </TableCell>
                            <TableCell align="center" className="text-white dashboard-overview-highlight">
                              <Button
                                variant="outlined"
                                className="text-white"
                                style={{ border: "2px solid yellowgreen" }}
                                onClick={() => handleSettingModalOpen(row.address)}
                              >
                                Details
                              </Button>
                            </TableCell>
                            <TableCell align="center" className="text-white dashboard-overview-highlight">
                              <Button
                                variant="outlined"
                                className="text-white"
                                style={{ border: "2px solid yellowgreen" }}
                                onClick={() => window.confirm('Are you sure you wish to delete this item?') ? handleRemoveChild(row.address) : console.log("cancelled")}
                              >
                                DELETE
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))
                      ) : (
                        <TableRow className="text-white dashboard-overview-highlight">
                          <TableCell
                            align="center"
                            className="text-white font-bold"
                            colSpan={8}
                          >
                            No child lotteries yet
                          </TableCell>
                        </TableRow>
                      )
                    ) : (
                      <TableRow className="text-white dashboard-overview-highlight">
                        <TableCell
                          align="center"
                          className="text-white font-bold"
                          colSpan={8}
                        >
                          Please connect your wallet
                        </TableCell>
                      </TableRow>
                    )
                  ) : (
                    <TableRow className="text-white dashboard-overview-highlight">
                      <TableCell
                        align="center"
                        className="text-white font-bold"
                        colSpan={8}
                      >
                        Please install wallet on your browser
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          </Stack>

          <Modal
            open={modalOpen}
            onClose={handleModalClose}
            aria-labelledby="modal-modal-title"
            aria-describedby="modal-modal-description"
          >
            <Box sx={modalStyle}>
              <h2>Add child lottery name</h2>
              <input
                type="text"
                placeholder="Enter child lottery name"
                className="admin-wallet-address"
                value={childName}
                onChange={handleChildNameChange}
              />
              <Button
                variant="contained"
                className="text-white"
                style={{ marginTop: "20px", width: "100%" }}
                onClick={() => deploy()}
                disabled={!childName || RNGInstance}
              >
                {!RNGInstance ? "Deploy RNG" : ellipseAddress(RNGInstance.options.address, 6)}
              </Button>
              <p style={{ fontSize: '16px' }}>{RNGInstance ? "Send 10 LINK token to this address" : ""}</p>
              <p style={{ fontSize: '14px' }}>{RNGInstance ? RNGInstance.options.address : ""}</p>
              <Button
                variant="contained"
                className="text-white"
                style={{ marginTop: "20px", width: "100%" }}
                onClick={() => setFee()}
                disabled={buttonIndex != 1}
              >
                {buttonIndex < 2 ? "Set Fee for RNG" : "DONE"}
              </Button>
              <Button
                variant="contained"
                className="text-white"
                style={{ marginTop: "20px", width: "100%" }}
                onClick={() => setKeyHash()}
                disabled={buttonIndex != 2}
              >
                {buttonIndex < 3 ? "Set Key Hash" : "DONE"}
              </Button>
              <Button
                variant="contained"
                className="text-white"
                style={{ marginTop: "20px", width: "100%" }}
                onClick={() => deployLottery()}
                disabled={buttonIndex != 3}
              >
                {buttonIndex < 4 ? "Deploy Lottery" : ellipseAddress(LotteryInstance.options.address, 6)}
              </Button>
              <Button
                variant="contained"
                className="text-white"
                style={{ marginTop: "20px", width: "100%" }}
                onClick={() => setLotteryAddress()}
                disabled={buttonIndex != 4}
              >
                {buttonIndex != 5 ? "Set Lottery Address" : "DONE"}
              </Button>
            </Box>
          </Modal>

          <Modal
            open={settingModalOpen}
            onClose={handleSettingModalClose}
            aria-labelledby="modal-modal-title"
            aria-describedby="modal-modal-description"
          >
            <Box sx={modalStyle1}>
              <div className="flex justify-between">
                <div className="font-bold py-2 px-4 text-center text-lg">
                  Current Lottery ID : {totalRound}
                </div>
                <div className="font-bold py-2 px-4 text-center text-lg">
                  Prize Pool : {web3Data.lotteryInfo.amountCollected ? ((Web3Utils.fromWei(web3Data.lotteryInfo.amountCollected, 'ether')) * 0.6).toFixed(4) : "0"} BNB
                </div>
                <div className="font-bold py-2 px-4 text-center text-lg">
                  Earnings : {web3Data.lotteryInfo.amountCollected ? ((Web3Utils.fromWei(web3Data.lotteryInfo.amountCollected, 'ether')) * 0.4).toFixed(4) : "0"} BNB
                </div>
                <div className="font-bold py-2 px-4 text-center text-lg">
                  {web3Data.lotteryInfo.endTime && (<Counter
                    timestamp={web3Data.lotteryInfo.endTime}
                  />)}
                </div>
              </div>
              <hr className="text-black bg-black h-0.5" />

              <div>
                <h1 className="text-4xl text-red py-4">Round Information</h1>
                <div className="flex justify-between py-2 items-center">
                  <div className="flex justify-center items-center">
                    <p className="text-xl">Lottery ID : &nbsp;</p>
                    <input
                      className="text-center w-24 text-sm md:text-xl lg:text-2xl outline-5 border-2 border-rose-600 text-black mr-2"
                      type="number"
                      onChange={handleViewIdChange}
                      value={lotteryIdForView}
                    />
                    <div
                      className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 w-24 text-center hover:cursor-pointer"
                      onClick={updateLotteryInfo}
                    >
                      View
                    </div>
                  </div>
                  <div className="font-bold py-2 px-4 text-center text-lg">
                    Prize Pool : {lotteryInfo.amountCollected ? ((Web3Utils.fromWei(lotteryInfo.amountCollected, 'ether')) * 0.6).toFixed(4) : "0"} BNB
                  </div>
                  <div className="font-bold py-2 px-4 text-center text-lg">
                    Earnings : {lotteryInfo.amountCollected ? ((Web3Utils.fromWei(lotteryInfo.amountCollected, 'ether')) * 0.4).toFixed(4) : "0"} BNB
                  </div>
                </div>
              </div>

              <div>
                <h1 className="text-4xl text-red py-4">Manual Settings</h1>
                <div className="flex justify-between py-2 items-center">
                  <div className="flex justify-center items-center">
                    <p className="text-xl">Duration(in minutes) : &nbsp;</p>
                    <input
                      className="text-center w-48 text-sm md:text-xl lg:text-2xl outline-5 border-2 border-rose-600 text-black mr-2"
                      type="number"
                      onChange={handleIntervalChange}
                      value={interval}
                    />
                    <div
                      className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 w-24 text-center hover:cursor-pointer"
                      onClick={startLottery}
                    >
                      Start
                    </div>
                  </div>
                  <div className="flex justify-center items-center">
                    <p className="text-xl">Lottery ID : &nbsp;</p>
                    <input
                      className="text-center w-24 text-sm md:text-xl lg:text-2xl outline-5 border-2 border-rose-600 text-black mr-2"
                      type="number"
                      onChange={handleLotteryIdChange}
                      value={lotteryIdForClose}
                    />
                    <div
                      className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 w-24 text-center hover:cursor-pointer"
                      onClick={closeLottery}
                    >
                      Close
                    </div>
                  </div>
                </div>
                <div className="flex justify-center py-2 items-center">
                  <div className="flex justify-center items-center">
                    <p className="text-xl">Lottery ID : &nbsp;</p>
                    <input
                      className="text-center w-24 text-sm md:text-xl lg:text-2xl outline-5 border-2 border-rose-600 text-black mr-2"
                      type="number"
                      onChange={handleClaimableIdChange}
                      value={lotteryIdForClaim}
                    />
                    <p className="text-xl ml-4">Winning Number : &nbsp;</p>
                    <input
                      className="text-center w-48 text-sm md:text-xl lg:text-2xl outline-5 border-2 border-rose-600 text-black mr-2"
                      onChange={handleWinningNumberChange}
                      value={winningNumber}
                    />
                    <div
                      className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 w-24 text-center hover:cursor-pointer"
                      onClick={finalizeLottery}
                    >
                      Finalize
                    </div>
                  </div>
                </div>
              </div>

              {/* <div>
                <h1 className="text-4xl text-red py-4">Automatic Settings</h1>
                <div className="flex justify-center py-2 items-center">
                  <div className="flex justify-center items-center">
                    <p className="text-xl">Interval(in minutes) : &nbsp;</p>
                    <input
                      className="text-center w-24 text-sm md:text-xl lg:text-2xl outline-5 border-2 border-rose-600 text-black mr-2"
                      type="number"
                      onChange={handleAutoIntervalChange}
                      value={autoInterval}
                    />
                    <p className="text-xl ml-4">Operator Private Key : &nbsp;</p>
                    <input
                      className="text-center w-72 text-sm md:text-xl lg:text-2xl outline-5 border-2 border-rose-600 text-black mr-2"
                      onChange={handlePrivKey}
                      value={privKey}
                    />
                    <div
                      className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 w-24 text-center hover:cursor-pointer"
                      onClick={confirmAutomation}
                    >
                      Confirm
                    </div>
                  </div>
                </div>
              </div> */}

              <div>
                <h1 className="text-4xl text-red py-4">Wallet Settings</h1>
                <div className="flex justify-center py-2 items-center">
                  <div className="flex justify-center items-center">
                    <p className="text-xl ml-4">Input 12 wallets here separate by comma: &nbsp;</p>
                    <input
                      className="text-center w-96 text-sm md:text-xl lg:text-2xl outline-5 border-2 border-rose-600 text-black mr-2"
                      onChange={handleWalletArray}
                      value={walletArray}
                    />
                    <div
                      className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 w-24 text-center hover:cursor-pointer"
                      onClick={confirmWallet}
                    >
                      Confirm
                    </div>
                  </div>
                </div>
              </div>
            </Box>
          </Modal>
          {/* <div className="flex justify-center items-center">
            <div
              className="bg-pink-500 hover:bg-pink-700 text-white font-bold py-2 w-32 text-center hover:cursor-pointer"
              onClick={deploy}
            >
              Deploy RNG
            </div>
            <p className="text-xl px-5">Deployed Address : {deployedAddress} </p>
          </div>
          <div className="flex justify-center items-center">
            <div
              className="bg-pink-500 hover:bg-pink-700 text-white font-bold py-2 w-32 text-center hover:cursor-pointer"
              onClick={deploy}
            >
              Deploy Lottery
            </div>
            <p className="text-xl px-5">Deployed Address : {deployedAddress} </p>
          </div> */}
        </div>
      </div>
    </div>
  );
}
